this is more, a movie review platform where users can discover movies based on peer recommendations, learn more about films they are interested in, and navigate effortlessly to find whatever information they are searching for, be it a cast list, an actor's filmography, or a portfolio of reviews by a respected contributor.

great timing! looks like a user is about to open the website for the first time.
when the index url responds, the user is shown the home page. This page is really important so that the user understands what the purpose of the website is, and conveys information about how to get started, namely, that the user will need to register to start interacting with movies.

the user reads the Create an Account tab, and notices the Account section in the navbar. The dropdown contains register and login, distinguished visually by some flavour icons. When the user loads the register page, they are presented with a straightforward form. Because we have used flask-login, web browsers can use built in tools such as generating strong passwords, to auto fill the form and streamline the user experience.

Filling out the register page will route the user directly to the login page to avoid confusion, aided by the flash text suggesting to the user their next steps. Once this login page is completed, once again using browser tools if available, the user is routed to the primary page - the movies page.

Here the user scrolls down the page, seeing an unsorted list of movies. They try liking some movies they are interested in, and then notice shrek. This user now decides they want to interact with a few shrek movies. They click on shrek to load that specific movie page. On this page they click the leave a review button, taking them away from shrek to another form. The user knows they are in the right place as the title reads "Review for 'Shrek 2'.
They fill out the form correctly, thanks to the descriptions of each field helping them understand what they rating is constrained by.
Upon submitting the review, they are shown that their action has been successful by the flash text, and also being routed back to the movie page now displaying their review. This also gives them an opportunity to quickly look at their own profile and see how their data is being used to build their page.

In order to quickly find more of the Shrek catalogue, the user recalls what they read on the Home page, and clicks Mike Myers, to see his filmography.

The user goes on to interact with another shrek movie, notably using the like button they saw earlier that is also built into the movie page.

---

The website features a few different icons and logos that I created, along with a fairly simple off white background I made in illustrator using my graphic design skills. There are only a few colours in the website, but I wanted items to be clearly grouped on each page. For example, the movie card is a specific custom css card that is a light pink, and is used in a small form on the home page, and a larger form in the specific movie page. This visually ties the specific page to the card the user interacted with on the main page.
The current page is displayed in golden yellow in the navbar, a similar colour to the logos highlight.
Icons are used throughout to distinguish elements. For example, the search results are given different icons depending on waht type of result they represent.
I wanted to use a grid of movie cards to distinguish from the search results format of a list, however this came with its own problems related to responsiveness. For example I had to find a balanced minimum card width that would allow the number of columns to decrease at a smart rate but still fill out most of the screen at any aspect ratio. Additionally, very small cards would start to spill text so I restricted the title text to at most 2 lines and added an ellipses at the point of overflow. 

Regarding accessibility, the website can be greatly enlarged, is not reliant on any colours to convey meaning, and all of the icons and text boxes are a high contrast to enable poor sighted people. The font is sans serif which provides easier readability for those with dyslexia. Each interactible, form field, or icon contains a label or alt text for screen readers, and additionally are tab indexed so the entire website is keyboard navigable.

The first thing I designed for this website was an entity relationship diagram for my database. It contains 6 models - Movie, Genre, Cast Member, User, Like, and Review - and 2 helper tables, for the many to many  relationships Movie with Cast Member, and Movie with Genre. These tables link the foreign keys of the models in their name, so that they can reference each helper table instance of their relation.
This network of relations allows a User to find information very easily - as they can use links on each page to traverse a relationship and find another page - for example finding a movie, traversing to find a review, then traversing the review to find a user. The user is never left having to backtrack in order to find information as it is almost always discoverable through their current page.

One advanced feature I implemented was the like button, which you can find on both the main page and a specific movie page. This button is handled using ajax. My ajax like script defines 2 states for the button, liked, or not liked. The script listens for a click event, manually triggered by the user or alternatively triggered by the enter key, retaining the aforementioned accessibility. It also listens for new html being added to the main page and makes that another target for the event  listener, which I'll talk about more in a moment. The handler then toggles the state of the button, and then changes the image of the button to whatever the new state is. the endpoint is simply my like movie or unlike movie routes, which update the like count and the database respectively.
Additionally it is worth noting that infinite scroll has been implemented on the main page. When the user has scrolled such that there is less than 100 points between the page and the bottom of the window, more html content will be loaded into the page, containing more rows of movie cards. This improves load times for the user as they only load a small number of movies initially, and also reduces the number of clicks for the user. Therefore these new movie cards, containing new like buttons, also needed to be added to the ajax listener when loaded.

I used the WAVE extension to test my accessibility and aria features. This required a few changes to labelling and notified me where my contrast was initially inadequate. I also used the website with a screen reader, and with a large zoom.
For functionality and responsiveness, I deployed a test version to find some flaws. This enabled me to test the app with a network throttler, so that I could ensure nothing broke, and that load speeds were adequate. It also gave me the opportunity to test the app on different devices including a fire tv browser, mobile device, and tablet.

I am very happy with the final product. I think the implementation of my model relationships went as planned, and especially once you understand the models, you can find information really quickly using the website, quicker than an SQL query for sure. Additionaly interacting with the database feels responsive and straightforward. All my forms are easy to understand, and there are elements of positive user feedback all over the site so you immediately see the changes you wanted to make be made.
I found it very challenging to get the ajax toggle to function correctly when the same functional button appeared across 2 pages, I needed to ensure that if the user loaded an outdated version of the page where a like button for example is in it's old toggle state, they cannot modify the database with that outdated page. I ended up with various problems from this such as users deleting other user likes, or one user having multiple likes.
I would have liked to implement the email confirmation system across users. This would also have helped with the legal right as a user to request I delete their data. Currently this would be a manual process but a new version of the site should have an email confirmed auto-delete that cascades through the database. Finally, I would next time implement more search functionality, including a filter and sort field, and advanced search that sorts results by the prominence of the query in the result.